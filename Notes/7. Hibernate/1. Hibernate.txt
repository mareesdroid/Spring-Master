What is hibernate?
    Hibernate is a framework for persisting/ saving Java objects in database
    saving and retrieving data from the database

Benefits of hibernate?
 Hibernate handles all of the low-level SQL code
 Minimizes the amount of JDBC code you have to develop
 Hibernate provides the Object-to-Relational Mapping (ORM)


 Object-to-Relational Mapping?
    The Developer defines mapping between Java class and database table

    Java Class                             Hibernate                            Database Table
                                    
                                                                                Student Table
                                      ____________________              _______________________________________________
    class Student(){                 |                    |             |id |   firstName   |   lastName    |   email  |
        int id;                      |                    |             |---|---------------|---------------|----------|
        String firstName;    --->    |      Hibernate     |  --->       |   |               |               |          |
        String lastName;     <---    |                    |  <---       |   |               |               |          |
        String email;                |____________________|             |   |               |               |          |
    }                                                                   |___|_______________|_______________|__________|

Hiberanate provides the Object-to-Relational Mapping (ORM)
    As a developer we develop(tell) it to hibernate how your java class or object how it maps to data in the database.



Required software 
jdk
ide
database server(mysql)
hibernate jar files and jdbc drivers



Setting up mysql:
mysql
dev.mysql.com/downloads

download
  mac 
    1.MySQL Community Server 8.0.18

    after installed (copy root password) go to system prefernce open sql
    
    Start up Terminal
        1.Type "cd ~/" to go to your home folder
        2.Type "touch .bash_profile" to create your new file.
        3.Edit .bash_profile with your favorite editor (or you can just type "open -e .bash_profile" to open it in TextEdit).
        4.export PATH=${PATH}:/usr/local/mysql/bin/
        
    then install the 
    2.MySQL Workbench 8.0.18
    if not open in workbench alter the password

    ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'dark_knight';

optional
    3.MySQL command(terminal)
  

    for windows install msi installer

    password mac office
    dark_knight
        root@localhost: X1yY-r3iyjth


1MWmoN6pbI;0




after all the setup complete open work bench and login
    open a script file from directory

            or 

    add your own query

ex:
        CREATE DATABASE  IF NOT EXISTS `hb_student_tracker`;
        USE `hb_student_tracker`;

        --
        -- Table structure for table `student`
        --

        DROP TABLE IF EXISTS `student`;

        CREATE TABLE `student` (
          `id` int(11) NOT NULL AUTO_INCREMENT,
          `first_name` varchar(45) DEFAULT NULL,
          `last_name` varchar(45) DEFAULT NULL,
          `email` varchar(45) DEFAULT NULL,
          PRIMARY KEY (`id`)
        ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;



Setting up hibernate in eclipse
    create new project 
    download hibernate files
    download mysql jdbc driver
    Add jar files to build PATH


change project perspective to java application
add lib folder 
then download hibernate files 
    http://hibernate.org/ -> orm
    download and extract copy all the jars in released and paste in lib

go to dev.mysql -> download Community
    select mysql connector/J (platform indepdent)

mysql-connector-java-8.0.18.jar copy and paste it to lib

after pasting all the jars

    go to project property
    java build path-> library -> add jars
    select all the jar in lib

on project explorer check refereced library to if all the jars aare added


after all the setup test your jdbc connection


example

    package com.mars.hibernate.demo;

import java.sql.Connection;
import java.sql.DriverManager;

public class TestJdbc {
	public static void main(String[] args) {

		String jdbcUrl = "jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC ";
		String user = "mars";
		String pass = "mars";
		try {
			System.out.println("Connecting to database : " + jdbcUrl);
			Connection myConn = DriverManager.getConnection(jdbcUrl, user, pass);
			System.out.println("Connection Successful!!");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
}





Hiebernate Dev prgress
    1.Add Hibernate Configuration file
    2.Annotate Jvaa Class
    3.Develop Java code to perform database operations



 1.Add Hibernate Configuration file
project folder/src/paste the config xml

jdbc config xml

sample
    hibernate.cfg.xml
            <!DOCTYPE hibernate-configuration PUBLIC
                "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
                "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

        <hibernate-configuration>

            <session-factory>

                <!-- JDBC Database connection settings -->
                <property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>
                <property name="connection.url">jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&amp;serverTimezone=UTC</property>
                <property name="connection.username">mars</property>
                <property name="connection.password">mars</property>

                <!-- JDBC connection pool settings ... using built-in test pool -->
                <property name="connection.pool_size">1</property>

                <!-- Select our SQL dialect -->
                <property name="dialect">org.hibernate.dialect.MySQLDialect</property>

                <!-- Echo the SQL to stdout -->
                <property name="show_sql">true</property>

        		<!-- Set the current session context -->
        		<property name="current_session_context_class">thread</property>

            </session-factory>

        </hibernate-configuration>


2.Annotate Jvaa Class

Object-toRaltional mapping

   Java Class                             Hibernate                            Database Table
                                    
                                                                                Student Table
                                      ____________________              _______________________________________________
    class Student(){                 |                    |             |id |   firstName   |   lastName    |   email  |
        int id;                      |                    |             |---|---------------|---------------|----------|
        String firstName;    --->    |      Hibernate     |  --->       |   |               |               |          |
        String lastName;     <---    |                    |  <---       |   |               |               |          |
        String email;                |____________________|             |   |               |               |          |
    }                                                                   |___|_______________|_______________|__________|


we map student class to student table 
    id data  to stdent table id field....and so on


Two Options For Mapping
    1.XML config file (legacy)
    2.Java Annotations (Modern, preferred)


Java Annotations:  (Entity class)
    Map Class to database table
    Map fields to database column   


        package com.mars.hiibernate.entity;

        import javax.persistence.Column;
        import javax.persistence.Entity;
        import javax.persistence.Id;
        import javax.persistence.Table;

            @Entity
            @Table(name="")
            public class Student {
        
        	    @Id
        	    @Column(name = "id")
        	    private int ID;

        	    @Column(name = "first_name")
        	    private String firstName;

        	    @Column(name = "last_name")
        	    private String lastName;

        	    @Column(name = "email")
        	    private String email;


        	    public Student() {
                
        	    }


        	    public Student(int iD, String firstName, String lastName, String email) {
        		    super();
        		    this.ID = iD;
        		    this.firstName = firstName;
        		    this.lastName = lastName;
        		    this.email = email;
        	    }


        	    public int getID() {
        	    	return ID;
        	    }


        	    public void setID(int iD) {
        	    	ID = iD;
        	    }


        	    public String getFirstName() {
        	    	return firstName;
        	    }


        	    public void setFirstName(String firstName) {
        	    	this.firstName = firstName;
        	    }


        	    public String getLastName() {
        	    	return lastName;
        	    }


        	    public void setLastName(String lastName) {
        	    	this.lastName = lastName;
        	    }


        	    public String getEmail() {
        	    	return email;
        	    }


        	    public void setEmail(String email) {
        	    	this.email = email;
        	    }


        	    @Override
        	    public String toString() {
        	    	return "Student [ID=" + ID + ", firstName=" + firstName + ", lastName=" + lastName + ", email=" + email + "]";
        	    }	
        }


3.Develop Java code to perform database operations

Session factory:
    Reads the hibernate config file
    Creates the Session objects
    Heavy-weight objects
    Only create once in your app
Session:
    Wraps a JDBC Connection
    Main object used to save/retrieve objects
    Short lived objects
    Retrieved from session factory


ex:
    SessionFacttory factory = new Configuration()
                                .configure("hibernate.cfg.xml")
                                .addAnnoatedClass(Student.class)
                                .buildSessionFactory();
    Session session = factory.getCurrentSession();
    try{
        //now use session object to save/retrieve Java objects
        //to save a java object

        //Create a student object
        Student tempStudent = new Student("Marees", "waran", "mareesdroid@gmail.com");

        // start transaction
        session.beginTransacion();

        // save the student
        session.save(tempStudent);

        // commit the transaction
        session.getTransaction().commit();
    }   finally{
        factory.close();
    }



Primary KEY
    Uniquely Identifies each row in a table
    Must be a unique value
    cannot contain null values



Hibernate CRUD (see project for full CRUD)

Create objects :
    SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Student.class)
				.buildSessionFactory();

		// Create Session
		Session session = factory.getCurrentSession();

		try {
			// use the session object to save java object

			// create a student object
			System.out.println("Creating a new student");
			Student tempStudent1 = new Student("Marees", "waran", "mareesdroid@gmail.com");
			Student tempStudent2 = new Student("Yuv", "raj", "yuv@gmail.com");
			Student tempStudent3 = new Student("Elavarasan", "A", "ela@gmail.com");
			// start a transaction
			session.beginTransaction();
			// save the student object
			System.out.println("Saving a Student");
			session.save(tempStudent1);
			session.save(tempStudent2);
			session.save(tempStudent3);
			// commit transaction
			session.getTransaction().commit();

			System.out.println("Done!");
		} finally {
			factory.close();
		}


Querying with HQL:

HQL(Hibernate Query Language)

select all(select * ) :

    List<Students> myResult = session
                                .createQuery("from Student")
                                .getResultList(); 


select where column name = "waran"(select * from Student where 'last_name' = 'waran') :
    List<Students> myResult = session
                                .createQuery("from Student s where s.lastName = 'waran'")
                                .getResultList(); 


retrieving data where lastname = 'waran' OR firstname = 'marees'
    List<Students> myResult = session
                                .createQuery("from Student s where s.lastName = 'waran' OR s.first_name='marees'")
                                .getResultList(); 

Like query
     List<Students> myResult = session
                                .createQuery("from Student s where s.email LIKE '%gmail.com'")
                                .getResultList(); 

